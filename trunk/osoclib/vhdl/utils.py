#! /usr/bin/python
# -*- coding: utf-8 -*-
#=============================================================================
# Name:     utils.py
# Purpose:  VHDL utilities function for Orchestra
#
# Author:   Fabrice MOUSSET
#
# Created:  2008/12/15
# License:  GPLv3 or newer
#=============================================================================
# Revision list :
#
# Date       By        Changes
#
#=============================================================================

"""This script file defines a list of function to help VHDL modules generation.
"""
__version__ = "$Id$"
__versionTime__ = "15/12/2008"
__author__ = "Fabrice MOUSSET <fabrice.mousset@laposte.net>"
__license__ = "GPLv3"
__copyright__ = "Copyright 2008 Fabrice MOUSSET"


_VHDL_LICENSE_SEP = "\n--                 "

_VHDL_LICENSE = "-" * 79
_VHDL_LICENSE += """
--  Design        :%s
--  File          : %s.vhd
--  Related files : (none)
--  Author(s)     : Fabrice Mousset (fabrice.mousset@laposte.net)
-------------------------------------------------------------------------------
-- Released under both BSD license (see bsd.txt) and LGPL license (see lgpl.txt).
-- Whenever there is any discrepancy between the two licenses, the BSD license
-- will take precedence.
--
-- CAUTION: THIS FILE IS AUTOMATICALY GENERATED BY Orchestra System on Chip
--          generator.
-------------------------------------------------------------------------------

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.numeric_std.all;

-- ----------------------------------------------------------------------------
--  Entity declaration
-- ----------------------------------------------------------------------------
"""

_VHDL_ARCHITECTURE = """
-- ----------------------------------------------------------------------------
--  Architecture declaration
-- ----------------------------------------------------------------------------
architecture RTL of %s is
"""

def combine_type(vhdl_type, width=None):
    """Generate VHDL signal type string.
    
        @param vhdl_type: list containing VHDL type elements
        @param width: signal width 
    """
    if(len(vhdl_type) > 1):
        if width:
            return "%s(%u downto 0)" % (vhdl_type[0], width-1)
        else:
            return vhdl_type[0] + "(" + " ".join(vhdl_type[1:]) + ")"
    return vhdl_type[0]


def signal_name(iface, signal, prefix=None):
    """Generate port signal name base on it interface settings.
    
        @param iface: interface used
        @param signal: string containing signal base name.
    """
    if isinstance(iface, basestring):
        names = [iface, signal]
    else:
        names = [iface.instance_name, iface.name, signal]
        if prefix:
            names.insert(0, prefix)
    return ("_".join(names)).lower()
    
def to_comment(comment, offset=2):
    """Generate VHDL Comment"""
    max_len = 0
    for line in comment:
        max_len = max(max_len, len(line))
        
    max_len += 4
    cmt = [("  %s" % l) for l in comment]

    sep_line = '-'*max_len
    cmt_sep = "\n%s-- " % (" " * offset) 
    cmt.insert(0, cmt_sep+sep_line)
    cmt.append(sep_line)
    
    return cmt_sep.join(cmt) + "\n"

def to_bit_vector(value, size):
    """Transform a decimal value into VHDL bit vector value."""
    bv = ""
    while(value > 0):
        bv = str(value%2) + bv
        value //= 2    
    bv = '0'*size + bv
    return bv[-size:]

def port_declaration(iface, signal, name=None):
    """Generate VHDL port signal declaration for entity.
    
        @param iface: Wishbone interface settings (vhdl.Interface)
        @param signal: VHDL signal declaration sequence
        @param name: default port name
    """
    if signal[1][0].upper() == "IN":
        pdir = "_o"
        port_type = "out "
    else:
        pdir = "_i"
        port_type = "in "
    
    if name == None:
        name = iface

    port_name = signal_name(name, signal[0].type + pdir)
    port_type += combine_type(signal[1][1], iface.port_width(signal[0].name))
    return (port_name.lower(), port_type.lower())

def make_header(description, filename):
    """Create VHDL description header.
    
        @param description: file description
        @param filename: VHDL file base name
    """
    
    offset = len(_VHDL_LICENSE_SEP)
    vhd_line = []
    line = ""
    for word in description.split():
        if offset + len(word) < 79:
            line = " ".join([line, word])
            offset += len(word)
        else:
            vhd_line.append(line)
            line = word
            offset = len(_VHDL_LICENSE_SEP) + len(word)
    
    if len(line) > 0:
        vhd_line.append(line) 
    
    return _VHDL_LICENSE % (_VHDL_LICENSE_SEP.join(vhd_line), filename)
